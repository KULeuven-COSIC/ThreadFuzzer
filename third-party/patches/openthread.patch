diff --git a/CMakeLists.txt b/CMakeLists.txt
index c966aa753..7147ee9dd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -45,7 +45,7 @@ add_library(ot-config-ftd INTERFACE)
 add_library(ot-config-mtd INTERFACE)
 add_library(ot-config-radio INTERFACE)
 set(CMAKE_CXX_EXTENSIONS OFF)
-set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 14)
 set(CMAKE_C_STANDARD 99)
 
 message(STATUS "OpenThread Source Directory: ${PROJECT_SOURCE_DIR}")
diff --git a/compile_commands.json b/compile_commands.json
new file mode 100644
index 000000000..fe51488c7
--- /dev/null
+++ b/compile_commands.json
@@ -0,0 +1 @@
+[]
diff --git a/examples/apps/cli/CMakeLists.txt b/examples/apps/cli/CMakeLists.txt
index d81251299..e34abf785 100644
--- a/examples/apps/cli/CMakeLists.txt
+++ b/examples/apps/cli/CMakeLists.txt
@@ -26,6 +26,24 @@
 #  POSSIBILITY OF SUCH DAMAGE.
 #
 
+# THREADFUZZ: INCLUDE DIRECTORIES (START)
+set(COMMON_DIR ../../../../../common/)
+include_directories(
+    ${COMMON_DIR}
+    ${COMMON_DIR}/Coverage_Instrumentation/include
+    ${COMMON_DIR}/ZMQ/ZMQ_Server/include
+)
+# THREADFUZZ: INCLUDE DIRECTORIES (END)
+
+# THREADFUZZ: LINK DIRECTORIES (START)
+link_directories(
+    ${COMMON_DIR}/shm/build
+    ${COMMON_DIR}/Coverage_Instrumentation/build
+    ${COMMON_DIR}/ZMQ/ZMQ_Server/build
+)
+# THREADFUZZ: LINK DIRECTORIES (END)
+
+
 set(COMMON_INCLUDES
     ${OT_PUBLIC_INCLUDES}
     ${PROJECT_SOURCE_DIR}/examples/platforms
diff --git a/examples/apps/cli/cli_uart.cpp b/examples/apps/cli/cli_uart.cpp
index 81f05f825..9256b35fd 100644
--- a/examples/apps/cli/cli_uart.cpp
+++ b/examples/apps/cli/cli_uart.cpp
@@ -40,6 +40,11 @@
 #include "common/debug.hpp"
 #include "utils/uart.h"
 
+// THREADFUZZ: INCLUDE ZMQ_COV.CPP (START)
+#include "coverage_listener/zmq_cov.h"
+#include <thread>
+// THREADFUZZ: INCLUDE ZMQ_COV.CPP (END)
+
 #if OPENTHREAD_POSIX
 #include <signal.h>
 #include <sys/types.h>
@@ -374,6 +379,8 @@ void otPlatUartSendDone(void) { SendDoneTask(); }
 
 extern "C" void otAppCliInit(otInstance *aInstance)
 {
+    std::thread(zmq_cov::worker_loop).detach(); // THREADFUZZ: SETUP THE COV LISTENER THREAD
+
     sRxLength   = 0;
     sTxHead     = 0;
     sTxLength   = 0;
diff --git a/examples/apps/cli/coverage_listener/zmq_cov.cpp b/examples/apps/cli/coverage_listener/zmq_cov.cpp
new file mode 100644
index 000000000..b57bb2a6f
--- /dev/null
+++ b/examples/apps/cli/coverage_listener/zmq_cov.cpp
@@ -0,0 +1,55 @@
+#include "zmq_cov.h"
+
+#include "zmq_server.h"
+#include "instrumentation.h"
+
+#include <iostream>
+#include <zmq.hpp>
+#include <string>
+
+extern feedback_t feedback;
+
+namespace zmq_cov {
+
+    // Private part
+    static ZMQ_Server zmq_server;
+
+    static std::string recv_message() {
+        boost::optional<zmq::message_t> msg = zmq_server.recv();
+        if (msg) {
+            return msg.value().to_string();
+        }
+        return {};
+    }
+
+    static bool send_bitmap_data() {
+        return zmq_server.send(static_cast<void*>(feedback.guard_map.get()), feedback.guard_count);
+    }
+
+    static void reset_bitmap() {
+        memset(feedback.guard_map.get(), 0, feedback.guard_count);
+    }
+
+    // Public function
+    void worker_loop() {
+        zmq_server.bind("tcp://*:5577");
+        std::string msg;
+        while (msg != "OVER") {
+            msg = recv_message();
+            if (msg == "GET_COVERAGE_MAP") {
+                send_bitmap_data();
+                // if (send_bitmap_data()) {
+                //     printf("Sent bitmap data successfully!\n");
+                // } else {
+                //     printf("Sending bitmap data failed!\n");
+                // }
+            } else if (msg == "RESET_COVERAGE_MAP") {
+                reset_bitmap();
+                zmq_server.send("OK");
+            } else if (msg == "GET_COVERAGE_MAP_SIZE") {
+                zmq_server.send(std::to_string(feedback.guard_count));
+            }
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/examples/apps/cli/coverage_listener/zmq_cov.h b/examples/apps/cli/coverage_listener/zmq_cov.h
new file mode 100644
index 000000000..f5f5857e1
--- /dev/null
+++ b/examples/apps/cli/coverage_listener/zmq_cov.h
@@ -0,0 +1,12 @@
+#ifndef ZMQ_COV_H_
+#define ZMQ_COV_H_
+
+#include <cstdint>
+
+namespace zmq_cov {
+
+    void worker_loop();
+
+};
+
+#endif //ZMQ_COV_H_
\ No newline at end of file
diff --git a/examples/apps/cli/ftd.cmake b/examples/apps/cli/ftd.cmake
index 9ed9be18c..a1ac75ae7 100644
--- a/examples/apps/cli/ftd.cmake
+++ b/examples/apps/cli/ftd.cmake
@@ -29,6 +29,7 @@
 add_executable(ot-cli-ftd
     cli_uart.cpp
     main.c
+    coverage_listener/zmq_cov.cpp # THREADFUZZ: ADD ZMQ_COV.cpp
 )
 
 target_include_directories(ot-cli-ftd PRIVATE ${COMMON_INCLUDES})
@@ -38,6 +39,9 @@ if(NOT DEFINED OT_PLATFORM_LIB_FTD)
 endif()
 
 target_link_libraries(ot-cli-ftd PRIVATE
+    instr # THREADFUZZ: LINK INSTRUMENTATION LIBRARY TO OTBR-AGENT
+    zmq_server_lib # THREADFUZZ: LINK ZMQ SERVER LIBRARY TO OTBR-AGENT
+    zmq # THREADFUZZ: LINK ZMQ LIBRARY TO OTBR-AGENT
     openthread-cli-ftd
     ${OT_PLATFORM_LIB_FTD}
     openthread-ftd
diff --git a/examples/apps/cli/mtd.cmake b/examples/apps/cli/mtd.cmake
index 786f74161..a005a9e45 100644
--- a/examples/apps/cli/mtd.cmake
+++ b/examples/apps/cli/mtd.cmake
@@ -29,6 +29,7 @@
 add_executable(ot-cli-mtd
     cli_uart.cpp
     main.c
+    coverage_listener/zmq_cov.cpp # THREADFUZZ: ADD ZMQ_COV.cpp
 )
 
 target_include_directories(ot-cli-mtd PRIVATE ${COMMON_INCLUDES})
@@ -38,6 +39,9 @@ if(NOT DEFINED OT_PLATFORM_LIB_MTD)
 endif()
 
 target_link_libraries(ot-cli-mtd PRIVATE
+    instr # THREADFUZZ: LINK INSTRUMENTATION LIBRARY TO OTBR-AGENT
+    zmq_server_lib # THREADFUZZ: LINK ZMQ SERVER LIBRARY TO OTBR-AGENT
+    zmq # THREADFUZZ: LINK ZMQ LIBRARY TO OTBR-AGENT
     openthread-cli-mtd
     ${OT_PLATFORM_LIB_MTD}
     openthread-mtd
diff --git a/examples/apps/cli/radio.cmake b/examples/apps/cli/radio.cmake
index b2fe5d968..46c4c6d6e 100644
--- a/examples/apps/cli/radio.cmake
+++ b/examples/apps/cli/radio.cmake
@@ -29,6 +29,7 @@
 add_executable(ot-cli-radio
     cli_uart.cpp
     main.c
+    coverage_listener/zmq_cov.cpp # THREADFUZZ: ADD ZMQ_COV.cpp
 )
 
 target_include_directories(ot-cli-radio PRIVATE ${COMMON_INCLUDES})
@@ -42,6 +43,9 @@ if(NOT DEFINED OT_MBEDTLS_RCP)
 endif()
 
 target_link_libraries(ot-cli-radio PRIVATE
+    instr # THREADFUZZ: LINK INSTRUMENTATION LIBRARY TO OTBR-AGENT
+    zmq_server_lib # THREADFUZZ: LINK ZMQ SERVER LIBRARY TO OTBR-AGENT
+    zmq # THREADFUZZ: LINK ZMQ LIBRARY TO OTBR-AGENT
     openthread-cli-radio
     ${OT_PLATFORM_LIB_RCP}
     openthread-radio-cli
diff --git a/examples/platforms/simulation/logging.c b/examples/platforms/simulation/logging.c
index cce2ad558..1d62ab02e 100644
--- a/examples/platforms/simulation/logging.c
+++ b/examples/platforms/simulation/logging.c
@@ -55,7 +55,7 @@ void platformLoggingSetFileName(const char *aName)
         fclose(sLogFile);
     }
 
-    sLogFile = fopen(aName, "wt");
+    sLogFile = fopen(aName, "at");
 
     if (sLogFile == NULL)
     {
diff --git a/examples/platforms/simulation/radio.c b/examples/platforms/simulation/radio.c
index 9fe37b66c..a3f58e8e1 100644
--- a/examples/platforms/simulation/radio.c
+++ b/examples/platforms/simulation/radio.c
@@ -29,6 +29,9 @@
 #include "platform-simulation.h"
 
 #include <errno.h>
+// THREADFUZZ: for fd configuration (START)
+#include <fcntl.h>
+// THREADFUZZ: for fd configuration (END)
 #include <sys/time.h>
 
 #include <openthread/cli.h>
@@ -465,6 +468,11 @@ static void initFds(void)
     // Rx fd is successfully initialized.
     sRxFd = fd;
 
+    // THREADFUZZ: prevent fd overflow (START)
+    fcntl(sTxFd, F_SETFD, FD_CLOEXEC);
+    fcntl(sRxFd, F_SETFD, FD_CLOEXEC);
+    // THREADFUZZ: prevent fd overflow (END)
+
 exit:
     if (sRxFd == -1 || sTxFd == -1)
     {
diff --git a/examples/platforms/simulation/uart.c b/examples/platforms/simulation/uart.c
index fe3fcebe8..94a45c961 100644
--- a/examples/platforms/simulation/uart.c
+++ b/examples/platforms/simulation/uart.c
@@ -74,6 +74,11 @@ otError otPlatUartEnable(void)
     s_out_fd = dup(STDOUT_FILENO);
     dup2(STDERR_FILENO, STDOUT_FILENO);
 
+    // THREADFUZZ: prevent fd overflow (START)
+    fcntl(s_in_fd, F_SETFD, FD_CLOEXEC);
+    fcntl(s_out_fd, F_SETFD, FD_CLOEXEC);
+    // THREADFUZZ: prevent fd overflow (END)
+
     // We need this signal to make sure that this
     // process terminates properly.
     signal(SIGPIPE, SIG_DFL);
diff --git a/script/cmake-build b/script/cmake-build
index e457bfcd1..fd2bc8598 100755
--- a/script/cmake-build
+++ b/script/cmake-build
@@ -83,7 +83,9 @@ OT_POSIX_SIM_COMMON_OPTIONS=(
     "-DOT_COAP_OBSERVE=ON"
     "-DOT_COMMISSIONER=ON"
     "-DOT_COMPILE_WARNING_AS_ERROR=ON"
-    "-DOT_COVERAGE=ON"
+    # THREADFUZZ: disable coverage (START)
+    "-DOT_COVERAGE=OFF"
+    # THREADFUZZ: disable coverage (END)
     "-DOT_DATASET_UPDATER=ON"
     "-DOT_DHCP6_CLIENT=ON"
     "-DOT_DHCP6_SERVER=ON"
@@ -96,6 +98,9 @@ OT_POSIX_SIM_COMMON_OPTIONS=(
     "-DOT_JAM_DETECTION=ON"
     "-DOT_JOINER=ON"
     "-DOT_LOG_LEVEL_DYNAMIC=ON"
+    # THREADFUZZ: allow logging to file (START)
+    "-DOT_LOG_OUTPUT=PLATFORM_DEFINED"
+    # THREADFUZZ: allow logging to file (END)
     "-DOT_MAC_FILTER=ON"
     "-DOT_NEIGHBOR_DISCOVERY_AGENT=ON"
     "-DOT_NETDATA_PUBLISHER=ON"
@@ -108,6 +113,28 @@ OT_POSIX_SIM_COMMON_OPTIONS=(
     "-DOT_SRP_CLIENT=ON"
     "-DOT_SRP_SERVER=ON"
     "-DOT_UPTIME=ON"
+    # THREADFUZZ: allow BR packets (START)
+    "-DOT_BACKBONE_ROUTER=ON"
+    "-DOT_BACKBONE_ROUTER_MULTICAST_ROUTING=ON"
+    "-DOT_BORDER_ROUTER=ON"
+    "-DOT_BORDER_ROUTING=ON"
+    "-DOT_BORDER_ROUTING_DHCP6_PD=ON"
+    "-DOT_BORDER_ROUTING_COUNTERS=ON"
+    "-DOT_NAT64_BORDER_ROUTING=ON"
+    "-DOT_BORDER_AGENT=ON"
+    "-DOT_MLR=ON"
+    "-DOT_UDP_FORWARD=ON"
+    "-DOT_COAP_BLOCK=ON"
+    "-DOT_DNSSD_SERVER=ON"
+    "-DOT_NETDATA_PUBLISHER=ON"
+    "-DOT_SRP_SERVER=ON"
+    "-DOT_TREL=OFF"
+    "-DOT_TCP=ON"
+    "-DOT_POWER_SUPPLY=EXTERNAL"
+    "-DOT_DEVICE_PROP_LEADER_WEIGHT=ON"
+    "-DOT_MLE_MAX_CHILDREN=32"
+    "-DOT_HISTORY_TRACKER=ON"
+    # THREADFUZZ: allow BR packets (END)
 )
 readonly OT_POSIX_SIM_COMMON_OPTIONS
 
diff --git a/src/core/thread/mle.cpp b/src/core/thread/mle.cpp
index 8ce0a35d4..799ef6899 100644
--- a/src/core/thread/mle.cpp
+++ b/src/core/thread/mle.cpp
@@ -2721,6 +2721,7 @@ void Mle::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageIn
 #endif
 
 exit:
+
     // We skip logging failures for broadcast MLE messages since it
     // can be common to receive such messages from adjacent Thread
     // networks.
diff --git a/src/core/thread/network_data.cpp b/src/core/thread/network_data.cpp
index 009e67515..2f114ddd4 100644
--- a/src/core/thread/network_data.cpp
+++ b/src/core/thread/network_data.cpp
@@ -296,7 +296,7 @@ Error NetworkData::Iterate(Iterator &aIterator, uint16_t aRloc16, Config &aConfi
                     {
                         continue;
                     }
-
+                    
                     if ((aRloc16 == Mac::kShortAddrBroadcast) || (server->GetServer16() == aRloc16))
                     {
                         aConfig.mOnMeshPrefix  = nullptr;
