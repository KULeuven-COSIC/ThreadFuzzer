From a67fd995b42e340c1199367e994d09dd552e54b4 Mon Sep 17 00:00:00 2001
From: JakoCrafter <j.heirweghjh.jh@gmail.com>
Date: Wed, 9 Apr 2025 15:08:27 +0200
Subject: [PATCH] coap_fix_patch

---
 src/core/coap/coap.cpp  | 36 ++++++++++++++++++++++++++++--------
 src/core/thread/mle.cpp |  5 +++--
 src/core/thread/mle.hpp |  2 +-
 3 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/src/core/coap/coap.cpp b/src/core/coap/coap.cpp
index cb04f801b..3b6c924d1 100644
--- a/src/core/coap/coap.cpp
+++ b/src/core/coap/coap.cpp
@@ -27,11 +27,15 @@
  */
 
 #include "coap.hpp"
+#include "shared_memory.h"
+#include <cstdint>
+#include <memory>
 
 #include "common/array.hpp"
 #include "common/as_core_type.hpp"
 #include "common/code_utils.hpp"
 #include "common/debug.hpp"
+#include "common/error.hpp"
 #include "common/instance.hpp"
 #include "common/locator_getters.hpp"
 #include "common/log.hpp"
@@ -40,20 +44,20 @@
 #include "net/udp6.hpp"
 #include "thread/thread_netif.hpp"
 
-// THREADFUZZ: INCLUDE SHM (START)
-// #include "shm/shared_memory.h"
-// THREADFUZZ: INCLUDE SHM (END)
+// THREADFUZZ: INCLUDE SHM HELPER (START)
+#include "shm/shm_helper.h"
+// THREADFUZZ: INCLUDE SHM HELPER (END)
 
 // THREADFUZZ: INCLUDE FUZZ_CONFIG (START)
 #include "shm/fuzz_config.h"
 // THREADFUZZ: INCLUDE FUZZ_CONFIG (END)
 
 // THREADFUZZ: EXTERN SHM_G (START)
-// extern std::unique_ptr<SHM> shm_g;
+extern std::unique_ptr<SHM_Helper> shm_helper_g;
 // THREADFUZZ: EXTERN SHM_G (END)
 
 // THREADFUZZ: EXTERN FUZZ_CONFIG_G (START)
-// extern Fuzz_Config fuzz_config_g;
+extern Fuzz_Config fuzz_config_g;
 // THREADFUZZ: EXTERN FUZZ_CONFIG_G (END)
 
 
@@ -196,9 +200,24 @@ Error CoapBase::Send(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo
     Error error;
 
     // THREADFUZZ: COAP INTERCEPTION POINT (START)
-    // if (fuzz_config_g.FUZZ_COAP) {
-    //     otLogNotePlat("CALLING FUZZER AT COAP LEVEL");
-    // }
+    if (fuzz_config_g.FUZZ_COAP) {
+         LogDebg("CALLING FUZZER AT COAP LEVEL");
+         LogInfo("CALLING FUZZER AT COAP LEVEL");
+
+         if (aMessage.GetLength() > SHM_MSG_MAX_SIZE) {
+           LogDebg("MESSAGE TOO BIG TO FIT INTO SHARED MEMORY");
+         } else {
+           std::unique_ptr<uint8_t[]> buf(new uint8_t[SHM_MSG_MAX_SIZE]);
+           uint32_t read_buf_size = aMessage.ReadBytes(0, buf.get(), aMessage.GetLength());
+           LogDebg("WRITING MSG TO SHM. SIZE: %u: ", read_buf_size);
+           shm_helper_g->send_msg(PACKET_SRC::SRC_PROTOCOL_STACK, buf.get(), read_buf_size, EnumMutex::SHM_MUTEX_COAP);
+           LogDebg("SUCCESS: READ MSG BACK FROM SHM. SIZE: %u: ", read_buf_size);
+           uint16_t new_payload_len = read_buf_size;
+           ot::Error err = aMessage.SetLength(new_payload_len);
+           if (err != ot::Error::OT_ERROR_NONE) return err;
+           aMessage.WriteBytes(0, buf.get(), new_payload_len);
+         }
+    }
     // THREADFUZZ: COAP INTERCEPTION POINT (END)
 
 #if OPENTHREAD_CONFIG_OTNS_ENABLE
@@ -214,6 +233,7 @@ Error CoapBase::Send(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo
     }
 #endif
     return error;
+
 }
 
 #if OPENTHREAD_CONFIG_COAP_BLOCKWISE_TRANSFER_ENABLE
diff --git a/src/core/thread/mle.cpp b/src/core/thread/mle.cpp
index 6d1292ced..c27708a96 100644
--- a/src/core/thread/mle.cpp
+++ b/src/core/thread/mle.cpp
@@ -32,6 +32,7 @@
  */
 
 #include "mle.hpp"
+#include "shared_memory.h"
 
 #include <openthread/platform/radio.h>
 #include <openthread/platform/time.h>
@@ -2753,7 +2754,7 @@ exit:
             uint8_t buf[SHM_MSG_MAX_SIZE];
             uint32_t buf_size = payload_len + 1;
             aMessage.ReadBytes(payload_offset - 1, buf, buf_size);
-            shm_helper_g->send_mle_msg(PACKET_SRC::SRC_DUT, buf, buf_size);
+            shm_helper_g->send_msg(PACKET_SRC::SRC_DUT, buf, buf_size, EnumMutex::SHM_MUTEX_MLE);
             // LogNote("WROTE MESSAGE TO SHARED MEMORY. SIZE: %u", buf_size);
             // if (!shm_g->read_bytes(mutex_num, buf, buf_size)) {
             //     LogNote("FAILED: READ MESSAGE FROM SHARED MEMORY");
@@ -4907,7 +4908,7 @@ Error Mle::TxMessage::SendTo(const Ip6::Address &aDestination)
             std::unique_ptr<uint8_t[]> buf(new uint8_t[SHM_MSG_MAX_SIZE]);
             uint32_t read_buf_size = this->ReadBytes(offset, buf.get(), payload_len);
             LogDebg("WRITING MESSAGE TO SHARED MEMORY. SIZE: %u: ", read_buf_size);
-            shm_helper_g->send_mle_msg(PACKET_SRC::SRC_PROTOCOL_STACK, buf.get(), read_buf_size);
+            shm_helper_g->send_msg(PACKET_SRC::SRC_PROTOCOL_STACK, buf.get(), read_buf_size, EnumMutex::SHM_MUTEX_MLE);
             // if (!shm_g->read_bytes(mutex_num, buf.get(), read_buf_size)) {
             //     LogNote("FAILED: READ MESSAGE FROM SHARED MEMORY");
             // } else {
diff --git a/src/core/thread/mle.hpp b/src/core/thread/mle.hpp
index 6ba770e0b..19e859345 100644
--- a/src/core/thread/mle.hpp
+++ b/src/core/thread/mle.hpp
@@ -1785,7 +1785,7 @@ private:
 
 #if OPENTHREAD_CONFIG_THREAD_VERSION >= OT_THREAD_VERSION_1_3
     // First attach cycle includes two Parent Requests to routers, followed by four to routers and REEDs.
-  static constexpr uint8_t kFirstAttachCycleTotalParentRequests       = 1; // THREADFUZZ CHANGED FROM 6 TO 1
+    static constexpr uint8_t kFirstAttachCycleTotalParentRequests       = 1; // THREADFUZZ CHANGED FROM 6 TO 1
     static constexpr uint8_t kFirstAttachCycleNumParentRequestToRouters = 2;
 #else
     // First attach cycle in Thread 1.1/1.2 includes a Parent Requests to routers, followed by one to routers and REEDs.
-- 
2.43.0

